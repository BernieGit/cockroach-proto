// Copyright 2015 The Cockroach Authors.
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//  implied. See the License for the specific language governing
//  permissions and limitations under the License. See the AUTHORS file
//  for names of contributors.
//  Author: Tamir Duberstein (tamird@gmail.com)

syntax = "proto2";

import "cockroach/sql/privilege.proto";
package cockroach.sql;

option go_package = "sql";

message ColumnType {
  // These mirror the types supported by the sql/parser. See
  //  sql/parser/types.go.
  enum Kind {
    BOOL = 0;
    INT = 1;
    // INT(width)
    FLOAT = 2;
    // FLOAT(precision)
    DECIMAL = 3;
    // DECIMAL(precision, width /* scale */)
    DATE = 4;
    TIMESTAMP = 5;
    INTERVAL = 6;
    STRING = 7;
    // STRING(width)
    BYTES = 8;
  }
  optional .cockroach.sql.ColumnType.Kind kind = 1;
  // BIT, INT, FLOAT, DECIMAL, CHAR and BINARY
  optional int32 width = 2;
  // FLOAT and DECIMAL.
  optional int32 precision = 3;
}

message ColumnDescriptor {
  optional string name = 1;
  optional uint32 id = 2;
  optional .cockroach.sql.ColumnType type = 3;
  optional bool nullable = 4;
  // Default expression to use to populate the column on insert if no
  //  value is provided.
  optional string default_expr = 5;
}

message IndexDescriptor {
  optional string name = 1;
  optional uint32 id = 2;
  optional bool unique = 3;
  // An ordered list of column names of which the index is comprised. This list
  //  parallels the column_ids list. If duplicating the storage of the column
  //  names here proves to be prohibitive, we could clear this field before
  //  saving and reconstruct it after loading.
  repeated string column_names = 4;
  // An ordered list of column names which the index stores in
  //  addition to the columns which are explicitly part of the index.
  repeated string store_column_names = 5;
  // An ordered list of column ids of which the index is comprised. This list
  //  parallels the column_names list.
  repeated uint32 column_ids = 6;
  // An ordered list of implicit column ids associated with the index. For
  //  non-unique indexes, these columns will be appended to the key. For unique
  //  indexes these columns will be stored in the value. The extra column IDs is
  //  computed as PrimaryIndex.column_ids - column_ids. For the primary index
  //  the list will be empty.
  repeated uint32 implicit_column_ids = 7;
}

// A TableDescriptor represents a table and is stored in a structured metadata
//  key. The TableDescriptor has a globally-unique ID, while its member
//  {Column,Index}Descriptors have locally-unique IDs.
message TableDescriptor {
  optional string name = 1;
  // The alias for the table. This is only used during query
  //  processing and not stored persistently.
  optional string alias = 2;
  optional uint32 id = 3;
  // ID of the parent database.
  optional uint32 parent_id = 4;
  repeated .cockroach.sql.ColumnDescriptor columns = 5;
  // next_column_id is used to ensure that deleted column ids are not reused.
  optional uint32 next_column_id = 6;
  optional .cockroach.sql.IndexDescriptor primary_index = 7;
  // indexes are all the secondary indexes.
  repeated .cockroach.sql.IndexDescriptor indexes = 8;
  // next_index_id is used to ensure that deleted index ids are not reused.
  optional uint32 next_index_id = 9;
  optional .cockroach.sql.PrivilegeDescriptor privileges = 10;
}

// DatabaseDescriptor represents a namespace (aka database) and is stored
//  in a structured metadata key. The DatabaseDescriptor has a globally-unique
//  ID shared with the TableDescriptor ID.
//  Permissions are applied to all tables in the namespace.
message DatabaseDescriptor {
  optional string name = 1;
  optional uint32 id = 2;
  optional .cockroach.sql.PrivilegeDescriptor privileges = 3;
}

