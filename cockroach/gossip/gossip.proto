// Copyright 2015 The Cockroach Authors.
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//  implied. See the License for the specific language governing
//  permissions and limitations under the License. See the AUTHORS file
//  for names of contributors.
//  Author: Spencer Kimball (spencer.kimball@gmail.com)

syntax = "proto3";

import "cockroach/proto/data.proto";
import "cockroach/proto/metadata.proto";
import "cockroach/util/unresolved_addr.proto";
package cockroach.gossip;

option go_package = "gossip";

// Request is the request struct passed with the Gossip RPC.
message Request {
  // Requesting node's ID.
  optional int32 node_id = 1;
  // Address of the requesting client.
  optional .cockroach.util.UnresolvedAddr addr = 2;
  // Local address of client on requesting node (this is a kludge to
  //  allow gossip to know when client connections are dropped).
  optional .cockroach.util.UnresolvedAddr l_addr = 3;
  // Maximum sequence number of gossip from this peer.
  optional int64 max_seq = 4;
  // Delta of new Infos since last gossip.
  map<string, .cockroach.gossip.Info> delta = 5;
}

// Response is returned from the Gossip.Gossip RPC.
//  Delta will be nil in the event that Alternate is set.
message Response {
  // Responding Node's ID.
  optional int32 node_id = 1;
  // Address of the responding client.
  optional .cockroach.util.UnresolvedAddr addr = 2;
  // Non-nil means client should retry with this address.
  optional .cockroach.util.UnresolvedAddr alternate = 3;
  // Maximum sequence number of gossip from this peer.
  optional int64 max_seq = 4;
  // Requested delta of server's infostore.
  map<string, .cockroach.gossip.Info> delta = 5;
}

// Info is the basic unit of information traded over the
//  gossip network.
message Info {
  optional .cockroach.proto.Value value = 1;
  // Wall time when info is to be discarded (Unix-nanos)
  optional int64 ttl_stamp = 2;
  // Number of hops from originator
  optional uint32 hops = 3;
  // Originating node's ID
  optional int32 node_id = 4;
}

