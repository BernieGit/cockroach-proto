syntax = "proto2";

package cockroach.proto;

option go_package = "proto";

message Addr {
  optional string network = 1;
  optional string address = 2;
}

// GossipRequest is the request struct passed with the Gossip RPC.
message GossipRequest {
  // Address of requesting node's server.
  optional .cockroach.proto.Addr addr = 1;
  // Local address of client on requesting node.
  optional .cockroach.proto.Addr l_addr = 2;
  // Maximum sequence number of gossip from this peer.
  optional int64 max_seq = 3;
  // Reciprocal delta of new info since last gossip.
  optional bytes delta = 4;
}

// GossipResponse is returned from the Gossip.Gossip RPC.
//  Delta will be nil in the event that Alternate is set.
message GossipResponse {
  // Requested delta of server's infostore.
  optional bytes delta = 1;
  // Non-nil means client should retry with this address.
  optional .cockroach.proto.Addr alternate = 2;
}

