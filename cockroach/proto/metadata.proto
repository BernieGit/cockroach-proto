// Copyright 2014 The Cockroach Authors.
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//      http://www.apache.org/licenses/LICENSE-2.0
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
//  implied. See the License for the specific language governing
//  permissions and limitations under the License. See the AUTHORS file
//  for names of contributors.
//  Author: Spencer Kimball (spencer.kimball@gmail.com)
//  Author: Bram Gruneir (bram+code@cockroachlabs.com)

syntax = "proto2";

import "cockroach/util/unresolved_addr.proto";
package cockroach.proto;

option go_package = "proto";

// Attributes specifies a list of arbitrary strings describing
//  node topology, store type, and machine capabilities.
message Attributes {
  repeated string attrs = 1;
}

// Replica describes a replica location by node ID (corresponds to a
//  host:port via lookup on gossip network) and store ID (identifies the
//  device).
message Replica {
  optional int32 node_id = 1;
  optional int32 store_id = 2;
  // ReplicaID uniquely identifies a replica instance. If a range is removed from
  //  a store and then re-added to the same store, the new instance will have a
  //  higher ReplicaID.
  optional int32 replica_id = 3;
}

// RangeDescriptor is the value stored in a range metadata key.
//  A range is described using an inclusive start key, a non-inclusive end key,
//  and a list of replicas where the range is stored.
message RangeDescriptor {
  optional int64 range_id = 1;
  // StartKey is the first key which may be contained by this range.
  optional bytes start_key = 2;
  // EndKey marks the end of the range's possible keys.  EndKey itself is not
  //  contained in this range - it will be contained in the immediately
  //  subsequent range.
  optional bytes end_key = 3;
  // Replicas is the set of nodes/stores on which replicas of this
  //  range are stored, the ordering being arbitrary and subject to
  //  permutation.
  repeated .cockroach.proto.Replica replicas = 4;
  // NextReplicaID is a counter used to generate replica IDs.
  optional int32 next_replica_id = 5;
}

// RangeTree holds the root node of the range tree.
message RangeTree {
  optional bytes root_key = 1;
}

// RangeTreeNode holds the configuration for each node of the Red-Black Tree that references all ranges.
message RangeTreeNode {
  optional bytes key = 1;
  // Color is black if true, red if false.
  optional bool black = 2;
  // If the parent key is null, this is the root node.
  optional bytes parent_key = 3;
  optional bytes left_key = 4;
  optional bytes right_key = 5;
}

// StoreCapacity contains capacity information for a storage device.
message StoreCapacity {
  optional int64 Capacity = 1;
  optional int64 Available = 2;
  optional int32 RangeCount = 3;
}

// NodeDescriptor holds details on node physical/network topology.
message NodeDescriptor {
  optional int32 node_id = 1;
  optional .cockroach.util.UnresolvedAddr address = 2;
  optional .cockroach.proto.Attributes attrs = 3;
}

// StoreDescriptor holds store information including store attributes, node
//  descriptor and store capacity.
message StoreDescriptor {
  optional int32 store_id = 1;
  optional .cockroach.proto.Attributes attrs = 2;
  optional .cockroach.proto.NodeDescriptor node = 3;
  optional .cockroach.proto.StoreCapacity capacity = 4;
}

